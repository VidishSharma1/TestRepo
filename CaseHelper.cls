public class CaseHelper {
    
    //method passes the new Cases to the @future sendRefundFormEmail method
    public void refundFormEmail(Map<Id, Case> newMap, Map<Id,Case> oldMap){
        List <Id> cList = new List <Id>();
        
        //get the case ids eligible for emails
        Refund_Form__c[] rfList = [SELECT Id FROM Refund_Form__c WHERE Case__c in :newMap.values()];
        if(rfList.size() > 0){      
            for(Case c : newMap.values()){
                if(c.Status != oldMap.get(c.Id).Status && c.Refund_Form_Email_Sent__c == false &&
                   (c.Status == 'Closed' || c.Status == 'Closed (No Guest Response)')) {
                       cList.add(c.Id);
                   }
            }
        }    
        
        if(cList.size() > 0){
            sendRefundFormEmail(cList);
        }
    }//refundFormEmail end
    
    @future(callout=true)
    public static void sendRefundFormEmail(List <Id> cIDs){
        
        //queries follow
        Case[] cList = [SELECT Id, ContactID, CaseNumber FROM Case WHERE Id in :cIDs];
        Refund_Form__c[] rfList = [SELECT Id, Case__c, Name FROM Refund_Form__c WHERE Case__c in :cList];
        OrgWideEmailAddress[] owea = [select Id from OrgWideEmailAddress where Address = 'ushfeedback@nbcuni.com'];
        
        //map of the cases' refund forms
        if(rfList.size() > 0){
            
            for(Case c : cList){
                List <Messaging.EmailFileAttachment> mefList = new List <Messaging.EmailFileAttachment>();
                
                for (Refund_Form__c rf : rfList){
                    Messaging.EmailFileAttachment efa = new Messaging.EmailFileAttachment();
                    if (rf.Case__c == c.Id){
                        if(!test.isRunningTest()){
                            // Reference the attachment page, pass in the Refund Form ID
                            PageReference pdf = Page.RefundFormPDFCreator;
                            pdf.getParameters().put('id', rf.Id);
                            pdf.setRedirect(true);
                            
                            // Take the PDF content
                            Blob b = pdf.getContent();
                            
                            // Create the email attachment                    
                            efa.setFileName('RefundForm' + rf.Name + '.pdf');
                            efa.setBody(b);
                        }
                        else{
                            Blob b = blob.valueof('TEST');
                        }
                    }
                    mefList.add(efa);
                }
                
                // String[] toAddresses = addresses.split(':', 0);
                Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
                
                //make sure we don't send to the real email address(es) from sandboxes
                List<String> toAddresses = new List<String>();
                if (UserInfo.getOrganizationId() == '00DE0000000Hm6RMAS'){ //production org ID
                    toAddresses.add('USHGrFinance@nbcuni.com');
                } 
                else {
                    toAddresses.add('NBC_Uni@RollingMist.com');  
                }
                
                String messageBody = 'Hello,\n' + 
                    '\n' +
                    'A Refund has been generated by the Guest Relations Team and is attached for your review.\n' +
                    '\n' +
                    'Thank you,\n' +
                    'Guest Relations';
                
                // Sets the paramaters of the email
                if ( owea.size() > 0 ) {
                    email.setOrgWideEmailAddressId(owea.get(0).Id);
                }
                email.setSubject( 'Guest Relations Refund for Case: ' + c.CaseNumber );
                email.setToAddresses( toAddresses);
                email.setPlainTextBody( messageBody);
                if(mefList.size() > 0){
                    email.setFileAttachments(mefList);
                }
                try{
                    // Sends the email
                    Messaging.SendEmailResult [] r = 
                        Messaging.sendEmail(new Messaging.SingleEmailMessage[] {email}); 
                    
                    // Create a new Task
                    Task t = new Task(WhatID = c.Id, Subject = 'Refund Form Email Sent', Description = messageBody, Status = 'Completed');
                    if (c.ContactId != null){
                        t.WhoID = c.ContactId;
                    }
                    insert t;
                    
                    //update the case to show that the email sent
                    c.Refund_Form_Email_Sent__c = true;
                    
                    update c;
                } 
                catch(Exception e){
                    System.debug('Email Failed');
                }
            }//loop end 
        }
    }//sendRefundFormEmail end
    
    
    /* Milestones are not being used anymore

public void setCaseEntitlement(Map<Id, Case> newMap, Map<Id,Case> oldMap, List<Case> newList){

//Get the Entitlements
Map <String, ID> entitlementMap = new Map <String, ID>();
List<Entitlement> eList = [SELECT Id, Name FROM Entitlement LIMIT 100];
List<RecordType> rt = [SELECT Id FROM RecordType WHERE Name = 'X1' AND SobjectType = 'Case'];
if (eList.size() > 0) {
for(Entitlement e: eList){
entitlementMap.put(e.Name, e.Id);
}
//Criteria for setting the Entitlements         
if (Trigger.isInsert){
for (Case c : newList){
if (rt.size() > 0) {
if(c.RecordTypeId == rt[0].Id) {
c.EntitlementId = entitlementMap.get('X1 Entitlement');
}
}
}
}
if (Trigger.isUpdate){                           
for (Case c : newMap.values()){
if (c.RecordType.Name == 'X1' && c.RecordTypeID != oldMap.get(c.Id).RecordTypeID){
c.EntitlementId = entitlementMap.get('X1 Entitlement');
}         
} //for Loop that sets the Entitlement
}//if Update
} //if entitlement        
} //setCaseEntitlement


public void completeMilestone(List <Case> cList) {  
DateTime completionDate = System.now(); 
List<Id> updateCases = new List<Id>();

for (Case c : cList){

//Check to make the Case has an open Milestone and is owned by a queue
if (c.owner.type != 'Queue' && c.SlaStartDate <= completionDate && c.SlaExitDate == null) {
updateCases.add(c.Id);                 
} 
}        
//If the owner is not a Queue and the Case has an open entitlement - Query to check for and update ALL related Milestones
if (updateCases.isEmpty() == false) {

List<CaseMilestone> cmsToUpdate = [SELECT Id, CaseId, completionDate FROM CaseMilestone
WHERE caseId in :cList AND completionDate = null];

if (cmsToUpdate.isEmpty() == false){
for (CaseMilestone cm : cmsToUpdate){
cm.completionDate = completionDate;
}
update cmsToUpdate;
}//if cmsToUpdate is empty
} // if updateCases is empty        
} //completeMilestone 

Milestones are not being used anymore*/
    
    /* 25-03-2022 Code Refactoring - Mirketa
public void setContactPhoneNum(Map<Id, Case> newMap, Map<Id,Case> oldMap){
List <Case> cList = new List <Case>();
List <Contact> consToUpdate = new List <Contact>();

//get the Cases we need
for (Case c : newMap.values()){
if(c.ContactId != oldMap.get(c.Id).ContactID && c.RecordType.Name != 'X1'
&& c.Phone_Number__c != null){
cList.add(c);
}
}   

//get the related Contacts
if(cList.size() > 0){
Map <Id, Contact> conMap = new Map <Id, Contact>();
List <ID> ConIDList = new List <ID>();
for (Case c : cList){
ConIDList.add(c.ContactID);
}           
Contact[] conLookupList = [SELECT Id, CreatedDate FROM Contact WHERE Id in :ConIDList AND Phone = null];
if(conLookupList.size() > 0) {
for (Contact con : conLookupList ){
conMap.put(con.Id, con);
}
//update the Contact's phone number
for(Case c2 : cList){
Contact conToUpdate = conMap.get(c2.ContactID);
if(conToUpdate.CreatedDate > System.now().addMinutes(-1)){
conToUpdate.Phone = c2.Phone_Number__c;
consToUpdate.add(conToUpdate);
}
}
update consToUpdate;
}//conLookupList.size end
}//cList.size end
}//setContactPhoneNum
*/
    public void setContactPhoneNum(Map<Id, Case> newMap, Map<Id,Case> oldMap){
        List <Case> cList = new List <Case>();
        List <Contact> consToUpdate = new List <Contact>();
        Set<Id> conIds=new Set<Id>();
        
        //get the Cases we need
        for (Case c : newMap.values()){
            if(c.ContactId != oldMap.get(c.Id).ContactID && c.RecordType.Name != 'X1' && c.Phone_Number__c != null){
                cList.add(c);
                conIds.add(c.ContactId);
            }
        }   
        
        //get the related Contacts
        if(cList.size() > 0){
            Map <Id, Contact> conMap = new Map <Id, Contact>([SELECT Id, CreatedDate FROM Contact WHERE Id in :conIds AND Phone = null]);
            if(conMap.size() > 0) {
                //update the Contact's phone number
                for(Case c2 : cList){
                    Contact conToUpdate = conMap.get(c2.ContactID);
                    if(conToUpdate!=null && conToUpdate.CreatedDate > System.now().addMinutes(-1)){
                        conToUpdate.Phone = c2.Phone_Number__c;
                        consToUpdate.add(conToUpdate);
                    }
                }
                if(consToUpdate.size()>0){
                    update consToUpdate;
                }
            }//conLookupList.size end
        }//cList.size end
    }
    
    //Send Reason Code Emails
    public void reasonCodeEmail(Map<Id, Case> newMap, Map<Id,Case> oldMap){
        
        List <Id> casesToUpdate = new List <Id>();
        
        //criteria for sending a Reason Code Email
        for (Case c : newMap.values()) {
            /*if (c.Reason_Code_Email_Sent__c == false 
&& c.Case_Experience_RC_Alert__c != null
&& c.Action_Required__c == 'Yes') {

casesToUpdate.add(c.Id);                    
} 
else */
            if (c.Status != oldMap.get(c.Id).Status 
                && (c.Status == 'Closed' || c.Status == 'Closed (No Guest Response)')
                && c.Action_Required__c != 'Yes'
                && c.Reason_Code_Email_Sent__c == false 
                && c.Case_Experience_RC_Alert__c != null) { 
                    
                    casesToUpdate.add(c.Id);
                }
        }     
        //if we get results pass the Case Ids to sendReasonCodeEmail
        if (!casesToUpdate.isEmpty()) {
            sendReasonCodeEmail(casesToUpdate);         
        }
    }// reasonCodeEmail end
    
    
    // At future method for building and sending the Reason Code emails
    @future(callout=true)
    public static void sendReasonCodeEmail(List <Id> cIDs) {
        List <Case> casestoUpdate = new List <Case>();
        List <Task> taskstoInsert = new List <Task>();
        Set <Reason_Code__c> rcSet = new Set <Reason_Code__c>();
        Map <String, Id> templateMap = new Map <String, Id>();
        
        // get the reply to address
        OrgWideEmailAddress[] owea = [select Id from OrgWideEmailAddress where Address = 'ushfeedback@nbcuni.com'];
        
        // query cases
        Case[] casesToEmail = [SELECT Id, Action_Required__c FROM Case WHERE Id in :cIDs];
        
        /* This is needed in order to use the email template. 
setTreatTargetObjectAsRecipient(false) will stop this random person from being emailed*/
        Contact cnt = [select id, Email from Contact where email != null limit 1];
        
        // build Reason Code sets
        Reason_Code__c[] rcList = [SELECT Id, Case_Lookup__c, Venue__c, Sub_Venue__c 
                                   FROM Reason_Code__c 
                                   WHERE Case_Lookup__c in :casesToEmail];
        
        if (!rcList.isEmpty()) {
            rcSet.addAll(rcList);   
        }
        
        // get Reason Code email mappings from custom metadata
        Reason_Code_Email_Settings__mdt[] rcEmails = [SELECT Id, Venue__c, Sub_Venue__c, Email__c  
                                                      FROM Reason_Code_Email_Settings__mdt];
        
        //get email templates and put them in a map
        EmailTemplate[] templates = [SELECT Id, Name, Body, Subject 
                                     FROM EmailTemplate 
                                     WHERE Name = 'USH Guest Feedback - Buzz Word' OR Name = 'USH Guest Feedback- Action Required'
                                     OR Name = 'USH Guest Feedback- No Action Required'];
        
        for (EmailTemplate et : templates) {
            templateMap.put(et.Name, et.Id);
        }
        
        //build and send email
        for (Case c : casesToEmail) {
            
            List<String> toAddresses = new List<String>();
            
            if (!rcSet.isEmpty()) {
                for (Reason_Code__c rc : rcSet) {
                    
                    if (rc.Case_Lookup__c == c.Id) {
                        for (Reason_Code_Email_Settings__mdt rcEmail : rcEmails) {
                            
                            //check venue
                            if (rcEmail.Venue__c != null) {
                                List <String> venues = rcEmail.Venue__c.split(',');
                                for (String vString : venues) {
                                    if (vString.trim() == rc.Venue__c) {
                                        toAddresses.add(rcEmail.Email__c);
                                    }
                                }  
                            }
                            
                            //check sub venue
                            if (rcEmail.Sub_Venue__c != null) {
                                List <String> subvenues = rcEmail.Sub_Venue__c.trim().split(',');
                                for (String svString : subvenues) {
                                    if (svString.trim()  == rc.Sub_Venue__c) {
                                        toAddresses.add(rcEmail.Email__c);
                                    }
                                }  
                            }
                        }
                        rcSet.remove(rc);
                    }
                } 
            }
            if (!toAddresses.isEmpty()) {
                Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
                /*if (c.Action_Required__c == 'Yes') {
email.setTemplateId(templateMap.get('USH Guest Feedback- Action Required'));
}
else {
email.setTemplateId(templateMap.get('USH Guest Feedback- No Action Required'));
} */
                
                email.setTemplateId(templateMap.get('USH Guest Feedback- No Action Required'));
                email.setSaveAsActivity(false);
                email.setTreatTargetObjectAsRecipient(false);
                email.setTargetObjectId(cnt.Id);
                email.setToAddresses(toAddresses);
                email.setWhatId(c.Id);
                if ( owea.size() > 0 ) {
                    email.setOrgWideEmailAddressId(owea.get(0).Id);
                }
                
                try {
                    Messaging.SendEmailResult [] r = 
                        Messaging.sendEmail(new Messaging.SingleEmailMessage[] {email}); 
                    
                    // get the rendered HTML body
                    String emailHtmlBody = email.getHTMLBody();
                    
                    // update reason code boolean
                    c.Reason_Code_Email_Sent__c = true;
                    
                    // create task
                    Task t = new Task();
                    t.Status = 'Completed';
                    t.Subject = 'No Action Required Reason Code Email Sent';
                    t.Type = 'Email';
                    t.WhatId = c.Id;
                    t.Description = emailHtmlBody.stripHtmlTags();
                    if (c.ContactId != null){
                        t.WhoID = c.ContactId;
                    }
                    
                    casestoUpdate.add(c);
                    tasksToInsert.add(t);
                    
                } catch (Exception e) {
                    //Reason_Code_Email_Sent__c stays false
                    System.debug(e.getMessage());
                }
            }	            
        } 
        if (!casesToUpdate.isEmpty()) {
            update casesToUpdate;
        }
        if (!tasksToInsert.isEmpty()) {
            insert tasksToInsert;
        }
    }// sendReasonCodeEmail end
    
    /*
*Description: Method to create contact from Email-to-case if contact does not exist 
*/
    public static void createContactFromEmailToCase(List<Case> newCases){
        Map<String,Map<String,String>> caseIdToContactDetailMap=new Map<String,Map<String,String>>();
        Map<String,String> caseIdToContactEmailMap=new Map<String,String>();
        List<Contact> newContactToCreate=new List<Contact>();
        String guestServicesRecTypeId=Schema.SObjectType.Contact.getRecordTypeInfosByDeveloperName().get('Guest_Services').getRecordTypeId();
        String guestOrlandoRecTypeId=Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get('Orld_Guest_Communications_Orlando').getRecordTypeId();
        
        List<Group> groups=[SELECT Id, Name, DeveloperName, Type FROM Group WHERE Type ='Queue' and DeveloperName='Orld_Unassigned'];
        String unassignedQId=groups.size()>0 ? groups[0].Id : null;
        
        for(case newCase:newCases){
            if(newCase.SuppliedEmail!=null && newCase.ContactId==null && newCase.Origin=='Email'
               && unassignedQId!=null && newCase.OwnerId==unassignedQId && guestOrlandoRecTypeId!=null && newCase.RecordTypeId==guestOrlandoRecTypeId){
                   if(newCase.SuppliedName!=null){
                       list<String> names=newCase.SuppliedName.split(' ');  
                       if(!names.IsEmpty()){
                           if(names.size()==2){
                               newContactToCreate.add(new Contact(FirstName=names[0]?.toLowerCase().capitalize(),LastName=names[1]?.toLowerCase().capitalize(),Email=newCase.SuppliedEmail,recordTypeId=guestServicesRecTypeId));
                           }else{
                               newContactToCreate.add(new Contact(LastName=names[0]?.toLowerCase().capitalize(),Email=newCase.SuppliedEmail,recordTypeId=guestServicesRecTypeId));
                           }
                           
                       }
                   }else{
                       newContactToCreate.add(new Contact(LastName='Unknown',Email=newCase.SuppliedEmail,recordTypeId=guestServicesRecTypeId));
                   }  
                   
               }	    
        }
        if(!newContactToCreate.IsEmpty()){
            INSERT newContactToCreate;
            Map<String,String> conEmailToContIdMap=new Map<String,String>();
            
            for(contact con:newContactToCreate){
                conEmailToContIdMap.put(con.Email, con.Id);
                
            }
            
            for(case newCase:newCases){
                if(conEmailToContIdMap.get(newCase.SuppliedEmail)!=null){
                    newCase.ContactId=conEmailToContIdMap.get(newCase.SuppliedEmail);
                }
            }
        }
    }
    
    /*
*Description: Method to set/update Initial values before Insert & Before Update  
* 
*/
    public static void setResetCaseFields(List<Case> newCaseList,Map<Id,Case> oldCaseMap){
        List<Case> unassignedCases=new List<Case>();
        List<Group> grps=[SELECT Id, Name, DeveloperName, Type FROM Group WHERE Type='Queue' and DeveloperName='Orld_Unassigned'];
        List<UserRole> userRoles=[SELECT Name, Id, DeveloperName FROM UserRole WHERE DeveloperName='Orld_Guest_Services_Coordinator_Orlando' ];
        List<User> users=[Select Id From User WHERE UserRole.DeveloperName='Orld_Guest_Services_Manager_Orlando' and IsActive=true LIMIT 1];
        
        
        Id profileId=userinfo.getProfileId();
        String profileName=[Select Id,Name from Profile where Id=:profileId].Name;
        system.debug('ProfileName'+profileName);
        
        Id caseRecordtypeId = Schema.SObjectType.Case.getRecordTypeInfosByName().get('Guest Communications Orlando').getRecordTypeId();
        
        if(!grps.IsEmpty()){
            unassignedCases=[Select Id FROM Case WHERE OwnerId=:grps[0].Id Order By CreatedDate Asc Limit 1];
        }
        
        for(case newCase:newCaseList){
            if(Trigger.isUpdate){
                //prevent assigning new cases when older unassigned cases exists
                if(UserInfo.getUserRoleId()==userRoles[0].Id && !grps.IsEmpty() && oldCaseMap.get(newCase.id).OwnerId==grps[0].Id && newCase.OwnerId != oldCaseMap.get(newCase.id).OwnerId && newCase.ownerId==UserInfo.getUserId() && !unassignedCases.isEmpty() && unassignedCases[0].Id!=newCase.Id){
                    newCase.addError(System.Label.Orld_Assign_Oldest_Case_First_Message);
                }
            }
            
            //Reset Duration Unassigned
            if((Trigger.IsInsert && !grps.isEmpty() && newCase.OwnerId==grps[0].Id) || (Trigger.IsUpdate && !grps.isEmpty() && newCase.OwnerId!=oldCaseMap.get(newCase.Id).OwnerId && newCase.OwnerId==grps[0].Id)){
                newCase.Orld_Unassigned_DateTime__c=System.now();
            }
            if((Trigger.IsInsert && newCase.OwnerId==UserInfo.getUserId()) || (Trigger.IsUpdate && !grps.isEmpty() && grps[0].Id==oldCaseMap.get(newCase.Id).OwnerId && newCase.OwnerId==UserInfo.getUserId())){
                newCase.Orld_Assignment_Data__c=System.today();
            }
            if(newCase.Orld_Legal__c && (oldCaseMap==null || oldCaseMap.get(newCase.Id).Orld_Legal__c==false)){
                newCase.OwnerId=users[0].Id;
            }
        }
    }
    
    public static void createContactFromCase(List<Case> newCases){
        Id caseRecordtypeId = Schema.SObjectType.Case.getRecordTypeInfosByName().get('Guest Communications Orlando').getRecordTypeId();
        if(newCases.size()==1){
            Case createdCase=newCases[0];
            if(createdCase.SuppliedEmail!=null && createdCase.RecordTypeId!=caseRecordtypeId) {
                //look for a Contact that matches the email address
                Contact[] existingContact = [Select Id,AccountId,email,FirstName,LastName,Phone,Orld_Extra_Details__c from Contact where email =:createdCase.SuppliedEmail LIMIT 1];
                System.debug('********'+existingContact.size());
                //if we found a match, use it
                Boolean contactExist = false;
                Boolean nameMatching = false;
                if(existingContact.size()>0){
                    if(existingContact[0].FirstName != null){
                    if(String.valueOf(existingContact[0].FirstName).equalsIgnoreCase(createdCase.First_Name__c) && String.valueOf(existingContact[0].LastName).equalsIgnoreCase(createdCase.Last_Name__c))
                    {
                        nameMatching = true;
                    }
                    }
                    else{
                        nameMatching = false;
                    }
                    
                    contactExist = true;
                }
                
                if (existingContact.size()>0 && nameMatching) {
                    Contact contactToUpdate = new Contact();
                    createdCase.ContactId = existingContact[0].Id;
                    if(existingContact[0].Phone == null){
                        contactToUpdate.Id = existingContact[0].Id;
                        contactToUpdate.Phone = createdCase.SuppliedPhone;    
                    }
                    else if (!String.valueOf(existingContact[0].Phone).equalsIgnoreCase(createdCase.SuppliedPhone)){
                        system.debug('inside else if'+contactToUpdate.Phone);
                        contactToUpdate.id = existingContact[0].Id;
                        if(existingContact[0].Orld_Extra_Details__c != null){
                            contactToUpdate.Orld_Extra_Details__c = existingContact[0].Orld_Extra_Details__c + ';' + createdCase.SuppliedPhone;
                            contactToUpdate.Orld_Duplicate_Email_Flag__c = true;
                        }
                        else{
                            contactToUpdate.Orld_Extra_Details__c = createdCase.SuppliedPhone;  
                            contactToUpdate.Orld_Duplicate_Email_Flag__c = true;
                        }
                        
                    }
                    if(contactToUpdate.id != null){
                    Database.update(contactToUpdate, false);
                    }
                    
                } 
                else if(createdCase.First_Name__c!=null && createdCase.Last_Name__c!=null){
                    //create the contact
                    Contact theContact = new Contact();
                    theContact.FirstName = createdCase.First_Name__c;                
                    theContact.LastName = createdCase.Last_Name__c;
                    Boolean validEmail = BuzzWordController.validateEmail(createdCase.SuppliedEmail);
                    system.debug('validEmail '+validEmail);
                    if(validEmail && contactExist == False){
                        theContact.Email = createdCase.SuppliedEmail;
                    }
                    else if(!validEmail && contactExist == False ){
                        theContact.Orld_Extra_Details__c = createdCase.SuppliedEmail;
                        //ExtraDetail = createdCase.SuppliedEmail;
                    }
                    if(contactExist && validEmail && nameMatching == False){
                        theContact.Orld_Extra_Details__c = createdCase.SuppliedEmail;
                        theContact.Orld_Duplicate_Email_Flag__c = true;
                    }
                    theContact.Phone = createdCase.SuppliedPhone;
                    database.insert(theContact, false);
                    //insert theContact;
                    //set the contact Id on the case
                    createdCase.ContactId = theContact.Id;                      
                }           
            }
        }
    }
    
    public static void createFeeItem(List<Case> newCases,Map<Id,Case> OldCaseMap){
        Id caseRecordtypeId = Schema.SObjectType.Case.getRecordTypeInfosByName().get('Guest Communications Orlando').getRecordTypeId();
        List<FeedItem> feedItems=new List<FeedItem>();
        
        for(Case newCase:newCases){
            if(caseRecordtypeId==newCase.RecordTypeId && newCase.Description!=null && (OldCaseMap==null || newCase.Description!=OldCaseMap.get(newCase.Id).Description)){
                FeedItem fItem = new FeedItem();
                fItem.ParentID = newCase.Id;
                fItem.Body = newCase.Description;
                feedItems.add(fItem);
            }
        }
        
        INSERT feedItems;
    }
    
}